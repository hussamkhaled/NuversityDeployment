DROP TABLE IF EXISTS APP_DOCS CASCADE;
DROP TABLE IF EXISTS APP_STATUS_TYPE CASCADE;
DROP TABLE IF EXISTS APPLICANT CASCADE;
DROP TABLE IF EXISTS APPLICATION CASCADE;
DROP TABLE IF EXISTS CAMPUS CASCADE;
DROP TABLE IF EXISTS CCOMP_TYPE CASCADE;
DROP TABLE IF EXISTS CONTRACT_SHEET CASCADE;
DROP TABLE IF EXISTS COURSE_COMP CASCADE;
DROP TABLE IF EXISTS COURSE CASCADE;
DROP TABLE IF EXISTS COURSE_OFFERING CASCADE;
DROP TABLE IF EXISTS COURSE_TYPE CASCADE;
DROP TABLE IF EXISTS CURRENCY CASCADE;
DROP TABLE IF EXISTS DEPARTMENT CASCADE;
DROP TABLE IF EXISTS ENREQ_STATUS CASCADE;
DROP TABLE IF EXISTS FACULTY CASCADE;
DROP TABLE IF EXISTS FINANCIAL_ACCOUNT CASCADE;
DROP TABLE IF EXISTS FINANCIAL_OPERATION CASCADE;
DROP TABLE IF EXISTS INVOICE CASCADE;
DROP TABLE IF EXISTS INVOICE_LINE CASCADE;
DROP TABLE IF EXISTS MAJOR_COURSE CASCADE;
DROP TABLE IF EXISTS MAJOR CASCADE;
DROP TABLE IF EXISTS OFFER_SESSION CASCADE;
DROP TABLE IF EXISTS OFFER_STATUS CASCADE;
DROP TABLE IF EXISTS PGM CASCADE;
DROP TABLE IF EXISTS UNIVERSITY CASCADE;
DROP TABLE IF EXISTS SEMESTER CASCADE;
DROP TABLE IF EXISTS STUDENT CASCADE;
DROP TABLE IF EXISTS SUBSCRIPTION CASCADE;
DROP TABLE IF EXISTS TEACHER CASCADE;
DROP TABLE IF EXISTS STUDENT_MAJOR CASCADE;
DROP TABLE IF EXISTS GLOBAL_GPA CASCADE;
DROP TABLE IF EXISTS CERTIFICATE CASCADE;
DROP TABLE IF EXISTS MAJOR_REQ_DOC CASCADE;
DROP TABLE IF EXISTS OPERATION_TYPE CASCADE;
DROP TABLE IF EXISTS FINANCIAL_DOCUMENT_TYPE CASCADE;
DROP TABLE IF EXISTS FINANCIAL_DOCUMENT CASCADE;
DROP TABLE IF EXISTS ENROLMENT_GRADE CASCADE;
DROP TABLE IF EXISTS COURSE_OFFER_SCHEDULE CASCADE;

CREATE TABLE CCOMP_TYPE (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);
INSERT INTO CCOMP_TYPE (IID, LABEL) VALUES('PRE REQUISITES', 'PRE REQUISITES');
INSERT INTO CCOMP_TYPE (IID, LABEL) VALUES('CO REQUISITES', 'CO REQUISITES');
INSERT INTO CCOMP_TYPE (IID, LABEL) VALUES('INCOMPATIBLE', 'INCOMPATIBLE');

CREATE TABLE COURSE_TYPE (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);
INSERT INTO COURSE_TYPE (IID, LABEL) VALUES('CORE', 'CORE');
INSERT INTO COURSE_TYPE (IID, LABEL) VALUES('MAJOR', 'MAJOR');
INSERT INTO COURSE_TYPE (IID, LABEL) VALUES('ELECTIVE', 'ELECTIVE');
INSERT INTO COURSE_TYPE (IID, LABEL) VALUES('GENERAL', 'GENERAL');


CREATE TABLE UNIVERSITY (
	IID VARCHAR(128) PRIMARY KEY,
	NAME VARCHAR(128) NOT NULL
);

INSERT INTO
	UNIVERSITY (IID, NAME)
	VALUES ('NUVERSITY', 'NUVERSITY');

CREATE TABLE FACULTY (
	IID VARCHAR(128) PRIMARY KEY,
	UNIVERSITY VARCHAR(128) NOT NULL,
	NAME varchar(128) NULL,
	IS_INTERNAL BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT FK_FAC_UNI
      FOREIGN KEY(UNIVERSITY) 
	  REFERENCES UNIVERSITY(IID)
);

INSERT INTO
	FACULTY (IID, UNIVERSITY, NAME, IS_INTERNAL)
	VALUES ('COMMON', 'NUVERSITY', 'COMMON', TRUE);

CREATE TABLE TEACHER (
	IID VARCHAR(128) PRIMARY KEY,
	USERID VARCHAR(128) NOT null,
	UNIVERSITY varchar(128) not null,
	CONSTRAINT FK_TEACHER_UNI
      FOREIGN KEY(UNIVERSITY) 
	  REFERENCES UNIVERSITY(IID)
);

CREATE TABLE CAMPUS (
	IID VARCHAR(128) PRIMARY KEY,
	NAME VARCHAR(128) NOT NULL,
	PHONE VARCHAR(128) NOT NULL,
	CADDRESS VARCHAR(128) NOT NULL
);

CREATE TABLE DEPARTMENT (
	IID VARCHAR(128) PRIMARY KEY,
	FACULTY VARCHAR(128) NOT NULL,
	NAME VARCHAR(128) NULL,
	DIRECTOR VARCHAR(128) not null,
	CONSTRAINT FK_DEPT_FAC
      FOREIGN KEY(FACULTY) 
	  REFERENCES FACULTY(IID)
);

CREATE TABLE PGM (
	IID VARCHAR(128) PRIMARY KEY,
	DEPARTMENT VARCHAR(128) NOT NULL,
	NAME VARCHAR(128) NOT NULL,
	CONSTRAINT FK_PGM_DEPT
      FOREIGN KEY(DEPARTMENT) 
	  REFERENCES DEPARTMENT(IID)
);

CREATE TABLE CERTIFICATE (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO CERTIFICATE(IID, LABEL) VALUES ('BSC', 'BSC');
INSERT INTO CERTIFICATE(IID, LABEL) VALUES ('MASTER', 'MASTER');
INSERT INTO CERTIFICATE(IID, LABEL) VALUES ('PHD', 'PHD');

CREATE TABLE MAJOR (
	IID VARCHAR(128) PRIMARY KEY,
	PGM VARCHAR(128) NOT NULL,
	NAME VARCHAR(128) NOT NULL,
	CREDIT_NUMBER INT not null,
	MYEARS decimal(3,2) NOT NULL,
	DESCRIPTION VARCHAR(2048) not null,
	PREQUISETS VARCHAR(2048) not null,
	CERTIFICATE VARCHAR(128) not null,
	CREDIT_COST decimal(10,2) NOT NULL, -- TBC
	CONSTRAINT FK_MAJOR_PGM
      FOREIGN KEY(PGM) 
	  REFERENCES PGM(IID),
	CONSTRAINT FK_MAJOR_CERTIFICATE
      FOREIGN KEY(CERTIFICATE) 
	  REFERENCES CERTIFICATE(IID)
);

CREATE TABLE MAJOR_REQ_DOC (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT null,
	MAJOR VARCHAR(128) not null,
	CONSTRAINT FK_MAJORDOC_MAJOR
      FOREIGN KEY(MAJOR) 
	  REFERENCES MAJOR(IID)
);

CREATE TABLE COURSE (
	IID VARCHAR(128) PRIMARY KEY,
	FACULTY VARCHAR(128) NOT NULL,
	TITLE VARCHAR(1024) NOT NULL,
	CREDIT INT NOT NULL,
	DESCRIPTION VARCHAR(2048),
	COORDINATOR VARCHAR(128) NOT NULL,
	CONSTRAINT FK_COURSE_FAC
      FOREIGN KEY(FACULTY) 
	  REFERENCES FACULTY(IID),
	CONSTRAINT FK_COURSE_TEACHER
      FOREIGN KEY(COORDINATOR) 
	  REFERENCES TEACHER(IID)
);

CREATE TABLE COURSE_COMP (
	IID VARCHAR(128) PRIMARY KEY,
	COURSE VARCHAR(128) NOT NULL,
	COURSE_CMP VARCHAR(128) not null,
	COMP_TYPE VARCHAR(128) NOT NULL,
	CONSTRAINT FK_CCOMP_COURSE
      FOREIGN KEY(COURSE) 
	  REFERENCES COURSE(IID),
	  CONSTRAINT FK_CCOMP_COURSECMP
      FOREIGN KEY(COURSE_CMP) 
	  REFERENCES COURSE(IID),
	CONSTRAINT FK_CCOMP_TYPE
      FOREIGN KEY(COMP_TYPE) 
	  REFERENCES CCOMP_TYPE(IID)	
);

CREATE TABLE MAJOR_COURSE (
	IID VARCHAR(128) PRIMARY KEY,
	MAJOR VARCHAR(128) NOT NULL,
	COURSE VARCHAR(128) NOT NULL,
	COURSE_TYPE VARCHAR(128) NOT NULL,
	CONSTRAINT FK_MJC_MAJOR
      FOREIGN KEY(MAJOR) 
	  REFERENCES MAJOR(IID),
	CONSTRAINT FK_MJC_COURSE
      FOREIGN KEY(COURSE) 
	  REFERENCES COURSE(IID),
	CONSTRAINT FK_MJC_CTYPE
	  FOREIGN KEY(COURSE_TYPE)
	  REFERENCES COURSE_TYPE(IID)
);

CREATE TABLE CONTRACT_SHEET (
	IID VARCHAR(128) PRIMARY KEY,
	MAJOR VARCHAR(128) NOT NULL,
	CORE_CREDIT INT NOT NULL,
	MAJOR_CREDIT INT NOT NULL,
	ELECTIVE_CREDIT INT NOT NULL,
	GENERAL_CREDIT INT NOT NULL,
	CONSTRAINT FK_CTS_MAJOR
      FOREIGN KEY(MAJOR) 
	  REFERENCES MAJOR(IID)
);

CREATE TABLE SEMESTER (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO SEMESTER(IID, LABEL) VALUES ('FALL-2021', 'FALL-2021');
INSERT INTO SEMESTER(IID, LABEL) VALUES ('SPRING-2021', 'SPRING-2021');
INSERT INTO SEMESTER(IID, LABEL) VALUES ('SUMMER-2021', 'SUMMER-2021');
insert into SEMESTER (IID, LABEL) values ('SPRING-2022', 'SPRING-2022');
insert into SEMESTER (IID, LABEL) values ('SUMMER-2022', 'SUMMER-2022');

CREATE TABLE OFFER_STATUS (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO OFFER_STATUS (IID, LABEL) VALUES('OPEN', 'OPEN');
INSERT INTO OFFER_STATUS (IID, LABEL) VALUES('CLOSED', 'CLOSED');
INSERT INTO OFFER_STATUS (IID, LABEL) VALUES('CONFIRMED', 'CONFIRMED');
INSERT INTO OFFER_STATUS (IID, LABEL) VALUES('OVERBOOKED', 'OVERBOOKED');
INSERT INTO OFFER_STATUS (IID, LABEL) VALUES('CANCELED', 'CANCELED');

create table OFFER_GRADE_FORMAT(
	IID VARCHAR(128) primary key,
	DESCRIPTION VARCHAR(2048) not NULL
);
INSERT INTO OFFER_GRADE_FORMAT (IID, DESCRIPTION) VALUES('FORMAT A', 'TWO EXAMS AND ATTENDANCE');
INSERT INTO OFFER_GRADE_FORMAT (IID, DESCRIPTION) VALUES('FORMAT B', 'TWO EXAMS, ASSIGNMENT AND ATTENDANCE');

create table OFFER_GRADE_LINE(
	IID VARCHAR(128) primary key,
	EXAM_NAME VARCHAR(128) not null,
	PERCENTAGE NUMERIC(5,2) not null,
	OFFER_FORMAT VARCHAR(128) not null,
	CONSTRAINT FK_GLINE_GFORMAT
      FOREIGN KEY(OFFER_FORMAT) 
	  REFERENCES OFFER_GRADE_FORMAT(IID)
);

INSERT INTO offer_grade_line (iid, exam_name, percentage, offer_format) VALUES('A', 'EXAM 1', 45, 'FORMAT A');
INSERT INTO offer_grade_line (iid, exam_name, percentage, offer_format) VALUES('B', 'EXAM 2', 45, 'FORMAT A');
INSERT INTO offer_grade_line (iid, exam_name, percentage, offer_format) VALUES('C', 'ATTENDANCE', 10, 'FORMAT A');
INSERT INTO offer_grade_line (iid, exam_name, percentage, offer_format) VALUES('D', 'EXAM 1', 35, 'FORMAT B');
INSERT INTO offer_grade_line (iid, exam_name, percentage, offer_format) VALUES('E', 'EXAM 2', 35, 'FORMAT B');
INSERT INTO offer_grade_line (iid, exam_name, percentage, offer_format) VALUES('F', 'ASSIGNMENT', 20, 'FORMAT B');
INSERT INTO offer_grade_line (iid, exam_name, percentage, offer_format) VALUES('G', 'ATTENDANCE', 10, 'FORMAT B');

CREATE TABLE COURSE_OFFERING (
	IID VARCHAR(128) PRIMARY KEY,
	COURSE VARCHAR(128) NOT NULL,
	SEMESTER VARCHAR(128) NOT NULL,
	OYEAR INT NOT NULL,
	TEACHER VARCHAR(128) NOT NULL,
	CAMPUS VARCHAR(128) NOT NULL,
	OSECTION VARCHAR(128) NOT NULL,
	CAPACITY INT NOT NULL,
	STATUS VARCHAR(128) NOT NULL,
	EFFECTIVE_DATE TIMESTAMP NOT NULL,
	EXPIRY_DAT TIMESTAMP NOT NULL,
	GRADE_FORMAT VARCHAR(128)not null,
	CONSTRAINT FK_OFF_COURSE
      FOREIGN KEY(GRADE_FORMAT) 
	  REFERENCES OFFER_GRADE_FORMAT(IID),
	  CONSTRAINT FK_OFF_GFORMAT
      FOREIGN KEY(COURSE) 
	  REFERENCES COURSE(IID),
	CONSTRAINT FK_OFF_TEACHER
      FOREIGN KEY(TEACHER) 
	  REFERENCES TEACHER(IID),
	CONSTRAINT FK_OFF_CAMPUS
      FOREIGN KEY(CAMPUS) 
	  REFERENCES CAMPUS(IID),
	CONSTRAINT FK_OFF_STATUS
	  FOREIGN KEY(STATUS)
	  REFERENCES OFFER_STATUS(IID),
	CONSTRAINT FK_OFF_SEMESTER
	  FOREIGN KEY(SEMESTER)
	  REFERENCES SEMESTER(IID)	  
);

CREATE TABLE OFFER_SESSION (
	IID VARCHAR(128) PRIMARY KEY,
	OFFER VARCHAR(128) NOT NULL,
	SDAY INT NOT NULL,
	START_TIME TIME NOT NULL,
	END_TIME TIME NOT NULL,
	CONSTRAINT FK_SESSION_OFFER
      FOREIGN KEY(OFFER) 
	  REFERENCES COURSE_OFFERING(IID)
);

CREATE TABLE COURSE_OFFER_SCHEDULE (
	IID VARCHAR(128) PRIMARY KEY,
	OFFER VARCHAR(128) NOT NULL,
	cday int NOT NULL,
	from_time time(0) NOT NULL,
	to_time time(0) NOT NULL,
	CONSTRAINT FK_SESSION_OFFER
      FOREIGN KEY(OFFER) 
	  REFERENCES COURSE_OFFERING(IID)
);

CREATE TABLE STUDENT (
	IID VARCHAR(128) PRIMARY KEY,
	USERID VARCHAR(128) NOT null,
	UNIVERSITY VARCHAR(128) not null,
	CAMPUS VARCHAR(128) not null,
	CONSTRAINT FK_STUDENT_UNIVERSITY
      FOREIGN KEY(UNIVERSITY) 
	  REFERENCES UNIVERSITY(IID),
	  CONSTRAINT FK_STUDENT_CAMPUS
      FOREIGN KEY(CAMPUS) 
	  REFERENCES CAMPUS(IID)
);

CREATE TABLE STUDENT_MAJOR (
	IID VARCHAR(128) PRIMARY KEY,
	STUDENTID VARCHAR(128) NOT null,
	MAJORID VARCHAR(128) not null,
	CONSTRAINT FK_STUDENTMAJOR_STUDENT
      FOREIGN KEY(STUDENTID) 
	  REFERENCES STUDENT(IID),
	  CONSTRAINT FK_STUDENTMAJOR_MAJOR
      FOREIGN KEY(MAJORID) 
	  REFERENCES MAJOR(IID)
);

CREATE TABLE GLOBAL_GPA (
	IID VARCHAR(128) PRIMARY KEY,
	STUDENTMAJORID varchar(128) not null,
	GPA NUMERIC(4,3) not null default 0.0,
	CONSTRAINT FK_GLOCALGPA_STUDENTMAJOR
      FOREIGN KEY(STUDENTMAJORID) 
	  REFERENCES STUDENT_MAJOR(IID)
);

CREATE TABLE STUDENT_COURSES_STATUS (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) not null
	);

INSERT INTO STUDENT_COURSES_STATUS (IID, LABEL) VALUES('PENDING', 'PENDING');
INSERT INTO STUDENT_COURSES_STATUS (IID, LABEL) VALUES('PASSED', 'PASSED');
INSERT INTO STUDENT_COURSES_STATUS (IID, LABEL) VALUES('FAILED', 'FAILED');

CREATE TABLE STUDENT_COURSES (
	IID VARCHAR(128) PRIMARY KEY,
	STUDENTMAJORID varchar(128) not null,
	COURSEO VARCHAR(128) not null,
	STATUS VARCHAR(128) not null,
	CONSTRAINT FK_STDCOUR_STUDENTMAJOR
      FOREIGN KEY(STUDENTMAJORID) 
	  REFERENCES STUDENT_MAJOR(IID),
	 CONSTRAINT FK_STDCOUR_COURSEO
      FOREIGN KEY(COURSEO) 
	  REFERENCES COURSE_OFFERING(IID),
	  CONSTRAINT FK_STDCOUR_STATUS
      FOREIGN KEY(STATUS) 
	  REFERENCES STUDENT_COURSES_STATUS(IID)
);

---
--- SUBSCRIPTION
---
CREATE TABLE ENREQ_STATUS (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO ENREQ_STATUS (IID, LABEL) VALUES('PENDING', 'PENDING');
INSERT INTO ENREQ_STATUS (IID, LABEL) VALUES('ACCEPTED', 'ACCEPTED');
INSERT INTO ENREQ_STATUS (IID, LABEL) VALUES('REJECTED', 'REJECTED');
INSERT INTO ENREQ_STATUS (IID, LABEL) VALUES('CANCELED', 'CANCELED');
INSERT INTO ENREQ_STATUS (IID, LABEL) VALUES('PASSED', 'PASSED');
INSERT INTO ENREQ_STATUS (IID, LABEL) VALUES('FAILED', 'FAILED');
INSERT INTO ENREQ_STATUS (IID, LABEL) VALUES('DROPED', 'DROPED');

CREATE TABLE ENROLMENT_REQUEST (
	IID VARCHAR(128) PRIMARY KEY,
	STUDENT VARCHAR(128) NOT NULL,
	OFFER VARCHAR(128) NOT NULL,
	REQUEST_DATE TIMESTAMP NOT NULL,
	STATUS VARCHAR(128) NOT NULL,
	REASON VARCHAR(2048),
	CONSTRAINT FK_ENREQ_OFFER
      FOREIGN KEY(OFFER) 
	  REFERENCES COURSE_OFFERING(IID),
	CONSTRAINT FK_ENREQ_STUDENT
	  FOREIGN KEY(STUDENT)
	  REFERENCES STUDENT(IID),
	CONSTRAINT FK_ENREQ_STATUS
	  FOREIGN KEY(STATUS)
	  REFERENCES ENREQ_STATUS(IID)
);

CREATE TABLE ENROLMENT_GRADE (
	IID VARCHAR(128) PRIMARY KEY,
	ENROLMENT_REQUEST VARCHAR(128) NOT NULL,
	OFFER_GRADE_LINE VARCHAR(128) NOT NULL,
	GRADE integer NOT NULL,
	CONSTRAINT FK_ENREQG_ENR
      FOREIGN KEY(ENROLMENT_REQUEST) 
	  REFERENCES ENROLMENT_REQUEST(IID),
	CONSTRAINT FK_ENREQ_GLINE
	  FOREIGN KEY(OFFER_GRADE_LINE)
	  REFERENCES OFFER_GRADE_LINE(IID)
);

CREATE TABLE SUBSCRIPTION (
	IID VARCHAR(128) PRIMARY KEY,
	STUDENT VARCHAR(128) NOT NULL,
	SEMESTER VARCHAR(128) NOT NULL,
	OYEAR INT NOT NULL,
	CONSTRAINT FK_SUB_STUDENT
	  FOREIGN KEY(STUDENT)
	  REFERENCES STUDENT(IID),
	CONSTRAINT FK_SUB_SEMESTER
	  FOREIGN KEY(SEMESTER)
	  REFERENCES SEMESTER(IID)
);
---
--- APPLICATION
---
CREATE TABLE APP_STATUS_TYPE (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO APP_STATUS_TYPE (IID, LABEL) VALUES ('NEW', 'NEW');
INSERT INTO APP_STATUS_TYPE (IID, LABEL) VALUES ('ACCEPTED', 'ACCEPTED');
INSERT INTO APP_STATUS_TYPE (IID, LABEL) VALUES ('REJECTED', 'REJECTED');
INSERT INTO APP_STATUS_TYPE (IID, LABEL) VALUES ('INPROGRESS', 'INPROGRESS');
INSERT INTO APP_STATUS_TYPE (IID, LABEL) VALUES ('PENDING', 'PENDING');

CREATE TABLE APPLICANT (
	IID VARCHAR(128) PRIMARY KEY,
	USERID VARCHAR(128) NOT NULL
);

CREATE TABLE APPLICATION (
	IID VARCHAR(128) PRIMARY KEY,
	APPLICANT VARCHAR(128) NOT NULL,
	MAJOR VARCHAR(128) NOT NULL,
	APPDATE TIMESTAMP NOT NULL,
	STATUS VARCHAR(128) NOT NULL,
	CONSTRAINT APP_APP_FK1
		FOREIGN KEY (APPLICANT)
		REFERENCES APPLICANT (IID),
	CONSTRAINT APP_MAJOR_FK2
		FOREIGN KEY (MAJOR)
		REFERENCES MAJOR (IID),
	CONSTRAINT APP_STATUS_FK2
		FOREIGN KEY (STATUS)
		REFERENCES APP_STATUS_TYPE (IID)	
);

CREATE TABLE APP_DOCS (
	IID VARCHAR(128) PRIMARY KEY, 
	APPLICATION_ID VARCHAR(128) NOT NULL, 
	DLABEL VARCHAR(128) NOT NULL, 
	DOC_PATH VARCHAR(1024) NOT NULL, 
	CONSTRAINT APP_DOCS_FK1
		FOREIGN KEY (APPLICATION_ID)
		REFERENCES APPLICATION (IID)
);

---
--- ACCOUNT
---

CREATE TABLE CURRENCY (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO CURRENCY (IID, LABEL) VALUES ('USD', 'USD');
INSERT INTO CURRENCY (IID, LABEL) VALUES ('AUD', 'AUD');
INSERT INTO CURRENCY (IID, LABEL) VALUES ('LBP', 'LBP');

CREATE TABLE FINANCIAL_ACCOUNT (
	IID VARCHAR(128) PRIMARY KEY,
	USERID VARCHAR(128) NOT NULL,
	ACCOUNT_TYPE VARCHAR(128) NOT NULL,
	CURRENCY VARCHAR(128) NOT NULL,
	AMOUNT DECIMAL(10,2) NOT NULL,
	CONSTRAINT FK_ACCOUNT_CURRENCY
		FOREIGN KEY (CURRENCY)
		REFERENCES CURRENCY(IID)
);

CREATE TABLE OPERATION_TYPE (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO OPERATION_TYPE (IID, LABEL) VALUES ('CR', 'CR');
INSERT INTO OPERATION_TYPE (IID, LABEL) VALUES ('DR', 'DR');

CREATE TABLE FINANCIAL_OPERATION (
	IID VARCHAR(128) PRIMARY KEY, -- operation reference
	ACCOUNT VARCHAR(128) NOT NULL,
	AMOUNT DECIMAL(10,2) NOT NULL,
	OTYPE varchar(128) not null,
	MSG VARCHAR(2048),
	ODATE TIMESTAMP NOT NULL,
	COMMENTS VARCHAR(2048),
	CONSTRAINT FK_FO_FA
      FOREIGN KEY(ACCOUNT) 
	  REFERENCES FINANCIAL_ACCOUNT(IID),
	CONSTRAINT FK_FO_OTYPR
      FOREIGN KEY(OTYPE) 
	  REFERENCES OPERATION_TYPE(IID)
);

CREATE TABLE FINANCIAL_DOCUMENT_TYPE (
	IID VARCHAR(128) PRIMARY KEY,
	LABEL VARCHAR(128) NOT NULL
);

INSERT INTO FINANCIAL_DOCUMENT_TYPE (IID, LABEL) VALUES ('Cash', 'Cash');
INSERT INTO FINANCIAL_DOCUMENT_TYPE (IID, LABEL) VALUES ('Online', 'Online');
INSERT INTO FINANCIAL_DOCUMENT_TYPE (IID, LABEL) VALUES ('Invoice', 'Invoice');
INSERT INTO FINANCIAL_DOCUMENT_TYPE (IID, LABEL) VALUES ('Discount', 'Discount');

CREATE TABLE FINANCIAL_DOCUMENT (
	IID VARCHAR(128) PRIMARY KEY, 
	OPERATION VARCHAR(128) NOT NULL,
	DOCREF DECIMAL(10,2) NOT NULL,
	CONSTRAINT FK_FD_OPERATION
      FOREIGN KEY(OPERATION) 
	  REFERENCES FINANCIAL_OPERATION(IID)
);

CREATE TABLE INVOICE (
	IID VARCHAR(128) PRIMARY KEY,
	IDATE TIMESTAMP NOT NULL,
	DUE_DATE TIMESTAMP NOT NULL,
	AMOUNT DECIMAL(10, 2) NOT NULL,
	CURRENCY VARCHAR(128) NOT NULL,
	SUBSCRIPTION VARCHAR(128),
	COMMENTS VARCHAR(2048),
	USERID VARCHAR(128) NOT NULL
);

CREATE TABLE INVOICE_LINE (
	IID VARCHAR(128) PRIMARY KEY,
	INVOICE VARCHAR(128) NOT NULL,
	AMOUNT DECIMAL(10, 2) NOT NULL,
	CURRENCY VARCHAR(128) NOT NULL,
	CHANGE_RATE DECIMAL(10, 2) NOT NULL,
	DESCRIPTION VARCHAR(2048),
	CONSTRAINT FK_IL_IN
      FOREIGN KEY(INVOICE) 
	  REFERENCES INVOICE(IID),
	CONSTRAINT FK_IL_CURRENCY
      FOREIGN KEY(CURRENCY) 
	  REFERENCES CURRENCY(IID)	 
);
